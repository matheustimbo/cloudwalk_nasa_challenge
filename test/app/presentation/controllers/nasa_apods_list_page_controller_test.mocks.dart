// Mocks generated by Mockito 5.4.4 from annotations
// in cloudwalk_nasa_challenge/test/app/presentation/controllers/nasa_apods_list_page_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:cloudwalk_nasa_challenge/app/data/models/nasa_apod.dart' as _i8;
import 'package:cloudwalk_nasa_challenge/app/domain/entities/date_range.dart'
    as _i9;
import 'package:cloudwalk_nasa_challenge/app/domain/repositories/nasa_apod_repository.dart'
    as _i2;
import 'package:cloudwalk_nasa_challenge/app/domain/usecases/get_nasa_apods_from_date_range_usecase.dart'
    as _i5;
import 'package:cloudwalk_nasa_challenge/app/presentation/store/nasa_apods_list_page_store.dart'
    as _i10;
import 'package:cloudwalk_nasa_challenge/shared/failures/failure.dart' as _i7;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mobx/mobx.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNasaApodRepository_0 extends _i1.SmartFake
    implements _i2.NasaApodRepository {
  _FakeNasaApodRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_2 extends _i1.SmartFake
    implements _i4.ReactiveContext {
  _FakeReactiveContext_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetNasaApodsFromDateRangeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNasaApodsFromDateRangeUseCase extends _i1.Mock
    implements _i5.GetNasaApodsFromDateRangeUseCase {
  @override
  _i2.NasaApodRepository get nasaApodRepository => (super.noSuchMethod(
        Invocation.getter(#nasaApodRepository),
        returnValue: _FakeNasaApodRepository_0(
          this,
          Invocation.getter(#nasaApodRepository),
        ),
        returnValueForMissingStub: _FakeNasaApodRepository_0(
          this,
          Invocation.getter(#nasaApodRepository),
        ),
      ) as _i2.NasaApodRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i8.NasaApod>>> call(
          _i9.DateRange? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [param],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, List<_i8.NasaApod>>>.value(
                _FakeEither_1<_i7.Failure, List<_i8.NasaApod>>(
          this,
          Invocation.method(
            #call,
            [param],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, List<_i8.NasaApod>>>.value(
                _FakeEither_1<_i7.Failure, List<_i8.NasaApod>>(
          this,
          Invocation.method(
            #call,
            [param],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, List<_i8.NasaApod>>>);
}

/// A class which mocks [NasaApodsListPageStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockNasaApodsListPageStore extends _i1.Mock
    implements _i10.NasaApodsListPageStore {
  @override
  set nasaApodList(List<_i8.NasaApod>? value) => super.noSuchMethod(
        Invocation.setter(
          #nasaApodList,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoadingNasaApodList => (super.noSuchMethod(
        Invocation.getter(#isLoadingNasaApodList),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isLoadingNasaApodList(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isLoadingNasaApodList,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasErrorLoadingNasaApodList => (super.noSuchMethod(
        Invocation.getter(#hasErrorLoadingNasaApodList),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasErrorLoadingNasaApodList(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasErrorLoadingNasaApodList,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoadingMoreNasaApods => (super.noSuchMethod(
        Invocation.getter(#isLoadingMoreNasaApods),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isLoadingMoreNasaApods(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isLoadingMoreNasaApods,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get typedSearchTerm => (super.noSuchMethod(
        Invocation.getter(#typedSearchTerm),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#typedSearchTerm),
        ),
        returnValueForMissingStub: _i11.dummyValue<String>(
          this,
          Invocation.getter(#typedSearchTerm),
        ),
      ) as String);

  @override
  set typedSearchTerm(String? value) => super.noSuchMethod(
        Invocation.setter(
          #typedSearchTerm,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_2(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_2(
          this,
          Invocation.getter(#context),
        ),
      ) as _i4.ReactiveContext);

  @override
  void setNasaApodList(List<_i8.NasaApod>? l) => super.noSuchMethod(
        Invocation.method(
          #setNasaApodList,
          [l],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setIsLoadingNasaApodList(bool? b) => super.noSuchMethod(
        Invocation.method(
          #setIsLoadingNasaApodList,
          [b],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setHasErrorLoadingNasaApodList(bool? b) => super.noSuchMethod(
        Invocation.method(
          #setHasErrorLoadingNasaApodList,
          [b],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setIsLoadingMoreNasaApods(bool? b) => super.noSuchMethod(
        Invocation.method(
          #setIsLoadingMoreNasaApods,
          [b],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setTypedSearchTerm(String? s) => super.noSuchMethod(
        Invocation.method(
          #setTypedSearchTerm,
          [s],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
